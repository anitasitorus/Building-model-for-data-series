# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gfSNceF746-t7nxxaS8QIR5sksVBf8Bj
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

from keras.layers import Dense, LSTM
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/Kaggle/SolarPrediction.csv')
df.head()

df.info()

df = df.sort_values(['UNIXTime'], ascending = [True])
df['UNIXTime'] = pd.to_datetime(df['UNIXTime'], unit='s')
df.head()

df = df.drop(columns=['Data', 'Time', 'Temperature', 'Pressure', 'Humidity', 
                 'WindDirection(Degrees)', 'Speed', 'TimeSunRise', 'TimeSunSet'])

import seaborn as sns
sns.pairplot(df)

time = df['UNIXTime'].values
radiation  = df['Radiation'].values

plt.figure(figsize=(15,5))
plt.plot(time, radiation, 'r')# 'r' is the color red
plt.title('Radiationper time', fontsize=20,color="blue")

plt.xlabel('Time',color="blue")
plt.ylabel('Radiation',color="blue")

plt.legend('Radiation',loc='upper right')
plt.show()

_, _, _, data_test = train_test_split(time, radiation, test_size=0.2)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[1:]))
  return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(radiation, window_size=60, batch_size=100, shuffle_buffer=1000)
test_set = windowed_dataset(data_test, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.Sequential([
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences=True)),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(32, activation="relu"),
    tf.keras.layers.Dense(16, activation="relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1),
])
optimizer = tf.keras.optimizers.Adam(lr=0.0005)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

range = df['Radiation'].max()-df['Radiation'].min()
range

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<range/10 and logs.get('val_mae')<range/10):
      self.model.stop_training = True
callbacks = myCallback()

num_epochs = 30
hist = model.fit(train_set, epochs=num_epochs, validation_data=(test_set), callbacks=[callbacks], verbose=1)

plt.plot(hist.history['mae'], ls='--',color="blue")
plt.plot(hist.history['val_mae'], ls='--',color="red")
plt.title('MAE GRAPICH')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()